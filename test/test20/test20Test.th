//
// Copyright 2017 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <vector>

#include "mine/message/Msg1.h"
#include "mine/TransportFrame.h"
#include "mine/AllMessages.h"
#include "orig/Msg1.h"
#include "common.h"

class Test20Suite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();

private:

    template <typename TMessage>
    using MineMsg1 = mine::message::Msg1<TMessage>;

    template <typename TMessage>
    using AllMessages = mine::AllMessages<TMessage>;

    template <typename TMessage>
    using Frame = mine::OpenFramingHeaderFrame<TMessage, AllMessages<TMessage> >;

    template <typename TMsg>
    TMsg construct()
    {
        TMsg msg;
        static_assert(msg.doMinLength() == 34U, "Invalid min length");
        TS_ASSERT_EQUALS(msg.doLength(), msg.doMinLength());
        TS_ASSERT_EQUALS(msg.getBlockLength(), 32U);
        TS_ASSERT(msg.doValid());
        TS_ASSERT_EQUALS(msg.doGetId(), mine::MsgId_Msg1);

        msg.field_field1().value().resize(1);
        auto& elem = msg.field_field1().value()[0];
        elem.field_mem5().value().resize(1);

        TS_ASSERT_EQUALS(elem.field_mem2().value(), mine::field::Enum1Val::Val2);

        elem.field_mem1().value() = 67U;
        elem.field_mem2().value() = mine::field::Enum1Val::Val1;
        elem.field_mem3().value() = 0x80010001;
        elem.field_mem4().field_mem1().value() = 31;
        elem.field_mem4().field_mem2().value() = -12;
        elem.field_mem5().value()[0].field_mem1().value() = 123;
        elem.field_mem5().value()[0].field_mem2().value() = -456;
        elem.field_mem6().value() = "hello";

        TS_ASSERT_EQUALS(msg.doLength(), msg.doMinLength() + 34U);
        return msg;
    }

    template <typename TMsg>
    void fillPadding(TMsg& msg)
    {
        test::common::resizeList(msg.field_pad1_());
        for (auto& elem : msg.field_field1().value()) {
            test::common::resizeList(elem.field_pad1_());
            test::common::resizeList(elem.field_pad2_());
            test::common::resizeList(elem.field_pad3_());
        }
    }

    template <typename TMine, typename TOrig>
    void verifyOrig(const TMine& mineMsg, TOrig& origMsg)
    {
        auto& mineField1 = mineMsg.field_field1();
        auto& origField1 = origMsg.field1();
        TS_ASSERT(origField1.hasNext());
        auto& mineElem = mineField1.value()[0];
        auto& origElem = origField1.next();
        auto& origMem5 = origElem.mem5();
        TS_ASSERT(origMem5.hasNext());
        auto& mineSubElem = mineElem.field_mem5().value()[0];
        auto& origSubElem = origMem5.next();
        auto origMem6Str = origElem.getMem6AsString();


        TS_ASSERT_EQUALS(mineMsg.getBlockLength(), origMsg.sbeBlockLength());
        TS_ASSERT_EQUALS(mineMsg.doLength(), origMsg.encodedLength());

        TS_ASSERT_EQUALS(mineElem.field_mem1().value(), origElem.mem1());
        TS_ASSERT_EQUALS((int)mineElem.field_mem2().value(), (int)origElem.mem2());
        TS_ASSERT_EQUALS(mineElem.field_mem3().getBitValue_bit0(), origElem.mem3().bit0());
        TS_ASSERT_EQUALS(mineElem.field_mem3().getBitValue_bit16(), origElem.mem3().bit16());
        TS_ASSERT_EQUALS(mineElem.field_mem3().getBitValue_bit31(), origElem.mem3().bit31());
        TS_ASSERT_EQUALS(mineElem.field_mem4().field_mem1().value(), origElem.mem4().mem1());
        TS_ASSERT_EQUALS(mineElem.field_mem4().field_mem2().value(), origElem.mem4().mem2());
        TS_ASSERT_EQUALS(mineSubElem.field_mem1().value(), origSubElem.mem1());
        TS_ASSERT_EQUALS(mineSubElem.field_mem2().value(), origSubElem.mem2());
        TS_ASSERT_EQUALS(mineElem.field_mem6().value(), origMem6Str);

    }
};

void Test20Suite::test1()
{
    using TestMessage = test::common::MineMessageFull;
    using TestMsg1 = MineMsg1<TestMessage>;
    using TestFrame = Frame<TestMessage>;

    auto msg = construct<TestMsg1>();

    TestFrame frame;
    auto buf = test::common::writeMsgIntoBuf<TestMessage>(msg, frame);

//    TS_TRACE(buf);
    TS_ASSERT(!buf.empty());
    auto msg2 = test::common::readMsg(buf, frame);
    TS_ASSERT(msg2);
    fillPadding(msg);
    test::common::verifyMine(msg, *msg2);

    auto origMsg = test::common::wrapOrigMessage<orig::Msg1, TestFrame>(buf, msg.doGetId());
    verifyOrig(msg, origMsg);
}

void Test20Suite::test2()
{
    using TestMessage = test::common::MineMessageFullOutput;
    using TestMsg1 = MineMsg1<TestMessage>;
    using TestFrame = Frame<TestMessage>;

    auto msg = construct<TestMsg1>();

    TestFrame frame;
    auto buf = test::common::writeMsgOutputIter<TestMessage>(msg, frame);
    TS_ASSERT_EQUALS(buf.size(), frame.length(msg));
    auto msg2 = test::common::readMsg(buf, frame);
    TS_ASSERT(msg2);
    fillPadding(msg);
    test::common::verifyMine(msg, *msg2);

    auto origMsg = test::common::wrapOrigMessage<orig::Msg1, TestFrame>(buf, msg.doGetId());
    verifyOrig(msg, origMsg);
}

void Test20Suite::test3()
{
    using TestMessage = test::common::MineMessageEmpty;
    using TestMsg1 = MineMsg1<TestMessage>;
    using TestFrame = Frame<TestMessage>;

    auto msg = construct<TestMsg1>();

    TestFrame frame;
    auto buf = test::common::writeMsgOutputIter(msg, frame);
    TS_ASSERT_EQUALS(buf.size(), frame.length(msg));


    using OtherTestMessage = test::common::MineMessageFull;
    using OtherTestMsg1 = MineMsg1<OtherTestMessage>;
    using OtherTestFrame = Frame<OtherTestMessage>;

    auto otherMsg = construct<OtherTestMsg1>();
    OtherTestFrame otherFrame;
    auto otherBuf = test::common::writeMsgIntoBuf(otherMsg, otherFrame);
    TS_ASSERT_EQUALS(buf, otherBuf);
}


