//
// Copyright 2017 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <vector>

#include "cxxtest/TestSuite.h"
#include "mine/Message.h"
#include "mine/message/Msg1.h"
#include "mine/TransportFrame.h"
#include "mine/AllMessages.h"
#include "orig/Msg1.h"

class Test1Suite : public CxxTest::TestSuite
{
public:
    void test1();

private:
    using DataBuf = std::vector<std::uint8_t>;

    class Handler;

    using MineMessage =
        mine::Message<
            comms::option::ReadIterator<const std::uint8_t*>,
            comms::option::WriteIterator<std::uint8_t*>,
            comms::option::IdInfoInterface,
            comms::option::LengthInfoInterface,
            comms::option::ValidCheckInterface,
            comms::option::Handler<Handler>
        >;

    using MineMsg1 = mine::message::Msg1<MineMessage>;
    using AllMessages = mine::AllMessages<MineMessage>;
    using OpenFramingHeaderFrame = mine::OpenFramingHeaderFrame<MineMessage, AllMessages>;

    class Handler
    {
    public:
        template <typename TMsg>
        void handle(TMsg& msg)
        {
            m_lastId = msg.doGetId();
        }

        void clear()
        {
            m_lastId = static_cast<mine::MsgId>(0);
        }

        mine::MsgId getLastId() const
        {
            return m_lastId;
        }

    private:
        mine::MsgId m_lastId = static_cast<mine::MsgId>(0);
    };

    OpenFramingHeaderFrame::MsgPtr doWriteRead(const MineMessage& msg, DataBuf& buf)
    {
        OpenFramingHeaderFrame frame;
        buf.resize(frame.length(msg));
        auto writeIter = comms::writeIteratorFor<MineMessage>(&buf[0]);
        auto es = frame.write(msg, writeIter, buf.size());
        static_cast<void>(es);
        assert(es == comms::ErrorStatus::Success);

        OpenFramingHeaderFrame::MsgPtr msg2;
        auto readIter = comms::readIteratorFor<MineMessage>(&buf[0]);
        es = frame.read(msg2, readIter, buf.size());
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        return msg2;
    }
};

void Test1Suite::test1()
{
    MineMsg1 msg;
    static_assert(msg.doMinLength() == 2U, "Invalid min length");
    static_assert(msg.doMaxLength() == 2U, "Invalid max length");
    TS_ASSERT_EQUALS(msg.length(), 2U);
    TS_ASSERT_EQUALS(msg.getId(), mine::MsgId_Msg1);

    msg.field_field1().value() = 0xabcd;

    DataBuf buf;
    auto msg2 = doWriteRead(msg, buf);
    TS_ASSERT(msg2);
    Handler handler;
    msg2->dispatch(handler);
    TS_ASSERT_EQUALS(handler.getLastId(), msg.doGetId());
    auto msg2Ptr = static_cast<MineMsg1*>(msg2.get());
    TS_ASSERT_EQUALS(msg2Ptr->field_field1(), msg.field_field1());
    TS_ASSERT_EQUALS(msg, *msg2Ptr);

    orig::MessageHeader hdr;
    hdr.wrap((char*)&buf[0], sbe2comms::openFramingHeader::minLength(), 0, buf.size());
    auto templateId = hdr.templateId();
    TS_ASSERT_EQUALS(msg.doGetId(), templateId);
    int actingVersion = hdr.version();
    int actingBlockLength = hdr.blockLength();
    auto headerLen =
        hdr.blockLengthEncodingLength() +
        hdr.templateIdEncodingLength() +
        hdr.schemaIdEncodingLength() +
        hdr.versionEncodingLength();
    orig::Msg1 origMsg;
    origMsg.wrapForDecode((char*)&buf[0], sbe2comms::openFramingHeader::minLength() + headerLen, actingBlockLength, actingVersion, buf.size());
    TS_ASSERT_EQUALS(msg.field_field1().value(), origMsg.field1());
    //TS_TRACE(buf);
}
