//
// Copyright 2017 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <vector>

#include "cxxtest/TestSuite.h"
#include "mine/Message.h"
#include "mine/message/Msg1.h"
#include "orig/Msg1.h"

class Test1Suite : public CxxTest::TestSuite
{
public:
    void test1();

private:
    using DataBuf = std::vector<std::uint8_t>;

    using MineMessage =
        mine::Message<
            comms::option::ReadIterator<const std::uint8_t*>,
            comms::option::WriteIterator<std::uint8_t*>,
            comms::option::IdInfoInterface,
            comms::option::LengthInfoInterface,
            comms::option::ValidCheckInterface,
            comms::option::RefreshInterface
        >;

    using MineMsg1 = mine::message::Msg1<MineMessage>;

    template <typename TMsg>
    TMsg doWriteRead(MineMessage& msg)
    {
        DataBuf buf;
        buf.resize(msg.length());
        msg.refresh();
        auto writeIter = comms::writeIteratorFor<MineMessage>(&buf[0]);
        auto es = msg.write(writeIter, buf.size());
        static_cast<void>(es);
        assert(es == comms::ErrorStatus::Success);

        TMsg msg2;
        msg2.setBlockLength(msg.getBlockLength());
        auto readIter = comms::readIteratorFor<MineMessage>(&buf[0]);
        es = msg2.read(readIter, buf.size());
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        return msg2;
    }
};

void Test1Suite::test1()
{
    MineMsg1 msg;
    static_assert(msg.doMinLength() == 2U, "Invalid min length");
    static_assert(msg.doMaxLength() == 2U, "Invalid max length");
    TS_ASSERT_EQUALS(msg.length(), 2U);
    TS_ASSERT_EQUALS(msg.getId(), mine::MsgId_Msg1);

    msg.field_field1().value() = 0xabcd;

    auto msg2 = doWriteRead<MineMsg1>(msg);
    TS_ASSERT_EQUALS(msg2.field_field1(), msg.field_field1());
}
